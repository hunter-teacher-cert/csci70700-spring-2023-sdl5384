;my corrections from the code along in class - errors found and fixed
section	.text ;the code goes here
	global _start       ;must be declared for using gcc
_start:                     ;tell linker entry point
    ;move the data from memory to the registers
    mov eax, [num1]
    mov ebx, [num2]
    
    ;add the data and store to register a
    add eax, ebx ;adds the two numbers together and stores it in whichever one is listed first, in this case Register A
    add eax, '0' ;converts from number ascii value
    
    ;storing result back to the result variable
    mov [result], eax
    mov ebx, [num3];takes in the third number into Register B
    add eax, ebx ;adds the two together, stores the new total in Register A
    mov [result], eax ;updates the result varible with new sum

    ;the next 5 lines print 'how many hours...'
	mov	edx, len    ;message length
	mov	ecx, msg    ;message to write
	mov	ebx, 1	    ;file descriptor (stdout)
	mov	eax, 4	    ;system call number (sys_write)
	int	0x80        ;call kernel
	
	;printing the numberical result
	mov	edx, 1    ;message length
	mov	ecx, result    ;message to write
	mov	ebx, 1	    ;file descriptor (stdout)
	mov	eax, 4	    ;system call number (sys_write)
	int	0x80        ;call kernel
	
	;printing the variable
	mov	edx, 1    ;message length
	mov	ecx, num1    ;message to write
	mov	ebx, 1	    ;file descriptor (stdout)
	mov	eax, 4	    ;system call number (sys_write)
	int	0x80        ;call kernel
	
	;printing the second string
	mov edx, len3      ;message length
	mov ecx, sayThisNextPhrase  ;message to write out
	mov ebx, 1     ;file descriptor (systen output)
	mov eax, 4      ;system call message (write it out)
	int 0x80        ;call kernel
	
	;mov eax, [num1]
	;add eax, '0' ;converts to ascii value
	;mov ecx, [num1]
	;add ecx, '0'

	mov	eax, 1	    ;system call number (sys_exit)
	int	0x80        ;call kernel

section	.data ;where constant or known values go

msg	db	'This language is crazy, but here goes nothing...',0xa	;our dear string
len	equ	$ - msg			;length of our dear string

;0xa is similar to saying backslash n for r in python and java to go to a new line
sayThisNextPhrase db 0xa,'...but I will give it a whirl.  Let us see what happens'
len3 equ $ - sayThisNextPhrase

num1 db 0
num2 db 5
num3 db 3

section .bss ; this is where variables go
result resb 2